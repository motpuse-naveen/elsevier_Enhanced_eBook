<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
<head>
	
<meta charset="utf-8" />
	
<meta name="viewport" content="width=device-width, initial-scale=1" />
	
<title>EPUB:Normal Neuronal Firing</title>
	<link rel="stylesheet" type="text/css" href="../css/style.css" />
	<link rel="stylesheet" type="text/css" href="../css/header_style.css" />
	
   <link rel="stylesheet" type="text/css" href="../../common_assets/css/iframe_common.css"/>
	
<script type="text/javascript" src="../script/jquery-3.6.0.min.js"></script>
	
<script type="text/javascript" src="../script/jquery-ui.min.js"></script>
   
<script src="../script/ui-touch-punch.js"></script></head>
<body>
	
<div role="main">
      
<div role="application">   
         
<div class="sr-only" style="position: absolute; left: -9999px;" role="heading" aria-level="1">Normal neuronal firing</div>
         
<!-- <div class="header">
            
<div class="main zoom-slider">
                <button class="btn-minus btn-range" tabindex="0" data-dir="minus" type="button" id="zoomOut" aria-label="Zoom out">-</button>
                <input type="hidden" name="storlek" id="sliderInputBox" class="visually-hidden" tabindex="-1" />
                
<div id="imageSlider" />
                <button class="btn-plus btn-range" tabindex="0" data-dir="plus" id="zoomIn" type="button" aria-label="Zoom In">+</button>
            </div>
        </div> -->
         
<div class="hotspot-slider-area">
            
<div class="poptip_btn" role="button" aria-label="Test Yourself" tabindex="0" />
            
<div class="holder" id="holder">
               
<div class="slide8 inner-slide-area" id="inner-image-area">
                  
<div id="image-map">
   <figure>
		<img id="img" src="../images/normal-neuronal-firing.png" alt="Cellular Electrophysiology" />   
   </figure>
   </div>	  
</div>
               
<div>
                  
<div class="pin" data-xpos="30" data-ypos="179">  
                     
<div class="pin-inner-txt">
                        
<p tabindex="0">Activation of E leads to graded excitatory postsynaptic potentials (EPSPs), the larger of which reaches threshold (approximately −40 mV) for an action potential. The action potential is followed by an after-hyperpolarization (AHP), the magnitude and duration of which determine when the next action potential can occur.</p>
                     </div>
                  </div>
                  
<div class="pin pin-down" data-xpos="728" data-ypos="9">  
                     
<div class="pin-inner-txt">
                        
<p tabindex="0">Right trace shows membrane potential (in millivolts [mV]), beginning at a typical resting potential (−70 mV).</p>
                     </div>
                  </div>
                  
<div class="pin" data-xpos="584" data-ypos="245">  
                     
<div class="pin-inner-txt">
                        
<p tabindex="0">Activation of I causes an inhibitory postsynaptic potential (IPSP).</p>
                     </div>
                  </div>
                  
<div class="pin pin-down" data-xpos="570" data-ypos="291">  
                     
<div class="pin-inner-txt">
                        
<p tabindex="0">The inset shows a magnified portion of the neuronal membrane as a lipid bilayer with interposed voltage-gated <span class="sr-only" style="position: absolute; left: -9999px;" >N A</span> <span aria-hidden="true">Na</span>+ and K+ channels; the direction of ion fluxes during excitatory activation is indicated. After firing, the membrane-bound <span class="sr-only" style="position: absolute; left: -9999px;">N A</span> <span aria-hidden="true">Na</span>+-K+ pump and star-shaped astroglial cells restore ionic balance.</p>
                     </div>
                  </div>
                  </div>
            </div>
         </div>
      </div>
   </div>
   
<div id="ariaMessages" class="visually-hidden" aria-live="assertive" />

<script type="text/javascript">
	$(".poptip_btn").on('click keydown', function(e) {
      console.log(e);
      if ((e.type === 'keydown' &amp;&amp; e.keyCode === 13) || e.type === 'click') {
         $(this).toggleClass('show-poptip');
         $('.tooltip-down, .tooltip-up').toggle();
         if ($(this).hasClass('show-poptip')) {
            Utils.ariaAnnounce('Test Enabled')
            $(this).attr('aria-label', 'Show Labels')
         } else {
            $(this).attr('aria-label', 'Test Yourself')
            Utils.ariaAnnounce('Test Disabled')
         }
         Utils.setImageBound();
         // console.log($(this).hasClass('show-poptip'));
      }
	});
</script>
	

<script>
	 $(document).ready(function(){
    // set the image-map width and height to match the img size
    $('#image-map').css({'width':$('#image-map img').width(), 
	'height':$('#image-map img').height() })
    
    //tooltip direction
    var tooltipDirection;
    var ariaLabelsForTooltipAnchors = ['E', 'Action potential', 'E IPSP', 'Inside, Outside, Lipid, Lipid Bilayer'];
    for (i=0; i&lt;$(".pin").length; i++)
    {               
        // set tooltip direction type - up or down             
        if ($(".pin").eq(i).hasClass('pin-down')) {
            tooltipDirection = 'tooltip-down';
        } else {
            tooltipDirection = 'tooltip-up';
            }
      var $toolTipAnchorWrapper = $('&lt;div&gt;', {
         'style' : "left:"+$(".pin").eq(i).data('xpos')+"px;top:"+$(".pin").eq(i).data('ypos')+"px; z-index: 1;",
         'class' : tooltipDirection+' tooltipInner',
         'tabindex': 0,
         'role': 'tooltip',
         'aria-label' :ariaLabelsForTooltipAnchors[i]
      });
      var $tooltipAnchor = $('&lt;div&gt;', {
         class: 'tooltip',
         id: 'tooltip-'+(i+1),
         'tabindex': 0
      });
      $toolTipAnchorWrapper.append('&lt;span&gt;?&lt;/span&gt;');
      $tooltipAnchor.html($(".pin").eq(i).html());
      $toolTipAnchorWrapper.append($tooltipAnchor);
      $tooltipAnchor.focusout(()=&gt;{
         Utils.hideToolTip();
      });
      // append the tooltip
      $("#image-map").append($toolTipAnchorWrapper);
    }    
    
    // show/hide the tooltip
    $('.tooltipInner').click(function(e) {
         Utils.hideToolTip();
         // $(this).children('.tooltip').fadeIn(100);
         var $toolTip = $(this).children('.tooltip');
         // console.log('sliderStepSize')
         Utils.showToolTip($toolTip);
         e.stopPropagation();
   });
   $('.tooltipInner').keydown(function(e) {
      if ((e.keyCode === 13)) {
         Utils.hideToolTip();
         // $(this).children('.tooltip').fadeIn(100);
         var $toolTip = $(this).children('.tooltip');
         // console.log('sliderStepSize')
         Utils.showToolTip($toolTip);
         e.stopPropagation();
      }
   });
});
</script>
<!--____ IMAGE ZOOM CONTROL JS ______--><!--____ IMAGE ZOOM CONTROL JS ______-->
<script>
   // Utility Functions
   (function (app){
   var maxSliderRange = 150;
   var minSliderRange = 0;
   var currentScale = 1;
   var totalSteps = 6;
   var sliderStepSize = maxSliderRange / totalSteps;
   var $imageWrapper = $('#inner-image-area');
   var $img = $("#img");
   var currentSliderVal = 0;
   var activeTooltipNumber = 0;
   app.setActiveTooltipNumber = function(n, nextPrevState) {
      n = parseFloat(n);
      if (nextPrevState) {
         activeTooltipNumber += n;
      } else {
         activeTooltipNumber = n;
      }
      if (activeTooltipNumber &gt; 9) {
         activeTooltipNumber = 1;
      }
      if (activeTooltipNumber &lt; 1 ) {
         activeTooltipNumber = 9;
      }
   }
   app.getActiveTooltipNumber = function () {
      return activeTooltipNumber;
   }
   app.announcementRange = {min: 0, max: 100};
   app.sliderRange = {min: minSliderRange, max: maxSliderRange};
   function scaleImage(scaleSliderVal) {
           //currentScale = parseFloat(1) + ((parseInt(scaleSliderVal) * 0.01)*01);
           $imageWrapper.css('transform', 'scale(' + currentScale + ')');
           $('#imageSlider .ui-slider-handle').attr({
              'aria-label': 'Image scale is ' + parseInt(app.changeRange(currentSliderVal)),
            });
   }
   app.hideToolTip = function () {
      var $visibleToolbar = $('.is-visible');
      if ($visibleToolbar.length) {
         $visibleToolbar.fadeOut(30);
         $visibleToolbar.removeClass('is-visible');
      }
   }
   app.getImageWrapper = function () {
       return $imageWrapper;
   }
   app.$imageSlider = $("#imageSlider");
   app.getSliderMaxRange = function () {
       return maxSliderRange;
   }
   app.getSliderMinRange = function () {
       return minSliderRange;
   }
   app.isZoomed = function () {
       return currentSliderVal &gt; 0;
   }
   app.getCurrentScale = function () {
       return currentScale;
   }
   app.imageScaleChanged = function (scaleSliderValue) {
      currentSliderVal = parseInt(scaleSliderValue);
      scaleImage(scaleSliderValue);
      Utils.unableDisableZoomButtons();
      app.$imageSlider.slider("value", scaleSliderValue);
      $("#sliderInputBox").val(scaleSliderValue);
   }
   app.reset = function (e) {
      if ((e.type === 'keydown' &amp;&amp; e.keyCode === 13) || e.type === 'click') {
         app.hideToolTip();
         app.imageScaleChanged(0);
         app.setImageBound(); 
         $('.column').removeClass('selected');
      }
   }
   app.showToolTip = function ($tooltip) {
      app.imageScaleChanged(10);
      app.setActiveTooltipNumber($tooltip.attr('id').split('-')[1]);
      $(".column").removeClass('selected');
      $(".column[data-tooltipNumber='col_"+Utils.getActiveTooltipNumber()+"']").addClass('selected');
      // console.log(Utils.getActiveTooltipNumber());
      $imageWrapper.css({'left' : 0, 'top' : 0});
      setTimeout(() =&gt; {
         var isLeftUpdated = false;
         var isTopUpdated = false;
         var winHeight = $(window).height();
         var winWidth = $(window).width();
         $tooltip.show();
         var toolTipoffset = $tooltip[0].getBoundingClientRect();
         $tooltip.hide();
         var newLeft = toolTipoffset.left;
         var newTop = toolTipoffset.top;
         $imageOffset = $imageWrapper.offset();
         if (toolTipoffset.right &gt; winWidth) {
            newLeft = $imageOffset.left - ((toolTipoffset.right - winWidth) - 50);
            isLeftUpdated = true;
         }
         if (toolTipoffset.left &lt; 50) {
            newLeft = Math.abs(toolTipoffset.left) + 50;
            isLeftUpdated = true;
         }
         if (toolTipoffset.top &lt; 50) {
            newTop = Math.abs(toolTipoffset.top) + 50;
            isTopUpdated = true;
         }
         if (toolTipoffset.bottom &gt; winHeight) {
            newTop = $imageOffset.top - ((toolTipoffset.bottom - winHeight) - 50);
            isTopUpdated = true;
         }
         if (isTopUpdated &amp;&amp; isLeftUpdated) {
            $imageWrapper.animate({'left': newLeft+'px', 'top': newTop+'px'}, 20);
         } else if (isTopUpdated) {
            $imageWrapper.animate({'top': newTop+'px'}, 100);
         } else if (isLeftUpdated) {
            $imageWrapper.animate({'left': newLeft+'px'}, 100);
         }
         $tooltip.fadeIn(500);
         $tooltip.find('p').focus();
         $tooltip.addClass('is-visible');
      }, 200);
   }
   app.getNewScaleByDirection = function (direction) {
      var newZoom = currentSliderVal;
      if (direction == "plus")  {
         if ((newZoom + sliderStepSize) &lt;= maxSliderRange) { 
               newZoom += sliderStepSize;
         } else {
               newZoom = maxSliderRange;
         }
      } else {
         if ((newZoom - sliderStepSize) &gt; minSliderRange) {
               newZoom -= sliderStepSize;   
         } else {
               newZoom = minSliderRange;
         }
      }
      return newZoom;
   }
   app.unableDisableZoomButtons = function () {
           var $zoomInButton = $('.btn-plus');
           var $zoomOutButton = $('.btn-minus');
           if(currentSliderVal === maxSliderRange) {
               $zoomInButton.addClass('disabled');
               $zoomOutButton.removeClass('disabled');
           } else if (currentSliderVal === minSliderRange) {
               $zoomInButton.removeClass('disabled');
               $zoomOutButton.addClass('disabled');
           } else {
               $zoomInButton.removeClass('disabled');
               $zoomOutButton.removeClass('disabled');
           }
   }
   
   app.setImageBound = function () {
           var $imgParPos = {left: parseInt($imageWrapper.css('left')), top: parseInt($imageWrapper.css('top'))};
           var $imgBoundingBox = $img[0].getBoundingClientRect();
           var $windowWidth = $(window).width();
           var $windowHeight = $(window).height();
           var newTop = $imgParPos.top;
           var newLeft = $imgParPos.left
           if ($imgParPos.left &gt; ($imgBoundingBox.width / 2) - ($windowWidth/2)) {
               newLeft = ($imgBoundingBox.width / 2) - ($windowWidth/2);
           }
           if ($imgParPos.left &lt; 0 &amp;&amp; Math.abs($imgParPos.left) &gt; ($imgBoundingBox.width / 2) - ($windowWidth/2)) {
               newLeft = 0 - (($imgBoundingBox.width / 2) - ($windowWidth/2));
           }
           if ($imgParPos.top &gt; ($imgBoundingBox.height / 2) - ($windowHeight/2)) {
               newTop = ($imgBoundingBox.height / 2) - ($windowHeight/2);
           }
           if ($imgParPos.top &lt; 0 &amp;&amp; Math.abs($imgParPos.top) &gt; ($imgBoundingBox.height / 2) - ($windowHeight/2)) {
               newTop = 0 - (($imgBoundingBox.height / 2) - ($windowHeight/2));
           }
           if($imgBoundingBox.width &lt; $(window).width()) {
               newLeft = 0
           } 
           if($imgBoundingBox.height &lt; $(window).height()) {
               newTop = 0;
           }
           $imageWrapper.animate({'top': newTop, 'left': newLeft}, 400);
       }
       app.ariaAnnounce = function (msg) {
       console.log(msg);
           if (msg) {
               $('#ariaMessages').html(msg);
           }
           setTimeout(function () {
               $('#ariaMessages').html("");
           }, 5000);
       };
       app.changeRange = function (OldValue) {
           OldMax = maxSliderRange;
           OldMin = minSliderRange;
           NewMax = 100;
           NewMin = minSliderRange;
           OldRange = (OldMax - OldMin)  
           NewRange = (NewMax - NewMin)  
           NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin;
           NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin;
           return Math.round(NewValue);
       }
   })(Utils = Utils || {});
   var Utils;
   // Utility Functions End
   
   let element = document.getElementById('inner-image-area');
   $(document).ready(function () {
      //  manageBreadcrumbs(1);
       resize();
       createDraggable();
       $('#imageSlider .ui-slider-handle').attr({
          'aria-label': 'Image scale is 0', 
          'role': 'button', 
         });
   });
   window.addEventListener("resize", resize);
   function resize() {
       if (!Utils.isZoomed()) {
           if ($(window).width() &lt;= 640) {
               Utils.getImageWrapper().find('#img').addClass('resp');
           } else {
               Utils.getImageWrapper().find('#img').removeClass('resp');
           }
       } else {
           Utils.getImageWrapper().find('#img').removeClass('resp');
       }
       // Utils.setImageBound();
       createDraggable()
   }
   Utils.getImageWrapper().dblclick(function () {
       if (!$('.btn-plus').hasClass('disabled')) {
           $('.btn-plus').trigger('click');
       }
   });
   
   function createDraggable() {
      $('#main-image-area').droppable({
         tolerance: 'fit'
      });
      Utils.getImageWrapper().draggable({
         handle: $('#img'),
         start: function (event, ui) {
            Utils.hideToolTip();
            console.log("Sliding")
         },
         stop: function (event, ui) {
            Utils.setImageBound();
         },
         drag: function (event, ui) {
         }
      });
   }
   // New Slider JS Code Start
   Utils.$imageSlider.slider({
       range: "max",
       min: Utils.getSliderMinRange(),
       max: Utils.getSliderMaxRange(),
       step: 1,
       value: 0,
       slide: function( event, ui ) {
           $("#sliderInputBox").val( ui.value );
           var value1 = $("#sliderInputBox").val();
           Utils.imageScaleChanged(value1)
       },
       start: function () {
       },
       stop: function (event, ui) {
           Utils.setImageBound();
           var rangedZoom = Utils.changeRange(parseInt(ui.value));
           var msg = `Image zoomed ${rangedZoom}%`;
           Utils.ariaAnnounce(msg);
       }
   });
   $('.btn-range').click(function() {
       var direction = $(this).data("dir");
       var newZoom = Utils.getNewScaleByDirection(direction);
       Utils.setImageBound();
       Utils.imageScaleChanged(newZoom);
       var msg = "Image Zoomed ";
       msg += direction === "plus" ? "In " : "Out ";
       var rangedZoom = Utils.changeRange(newZoom);
       msg += rangedZoom +"%";
       Utils.ariaAnnounce(msg);
       $('#imageSlider .ui-slider-handle').attr({
            'aria-label': 'Image scale is ' + parseInt(rangedZoom),
       });
   });
</script>
<script src="../../common_assets/scripts/iframe_common.js"></script>
</body></html>